package com.demos.param.ashtrestoant.DB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Void> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Oid = new Property(0, String.class, "oid", false, "OID");
        public final static Property Tbno = new Property(1, int.class, "tbno", false, "TBNO");
        public final static Property Tbname = new Property(2, String.class, "tbname", false, "TBNAME");
        public final static Property Id = new Property(3, int.class, "id", false, "ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Price = new Property(5, int.class, "price", false, "PRICE");
        public final static Property Qty = new Property(6, int.class, "qty", false, "QTY");
        public final static Property Fd_code = new Property(7, String.class, "fd_code", false, "FD_CODE");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
    }


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"OID\" TEXT," + // 0: oid
                "\"TBNO\" INTEGER NOT NULL ," + // 1: tbno
                "\"TBNAME\" TEXT," + // 2: tbname
                "\"ID\" INTEGER NOT NULL ," + // 3: id
                "\"NAME\" TEXT," + // 4: name
                "\"PRICE\" INTEGER NOT NULL ," + // 5: price
                "\"QTY\" INTEGER NOT NULL ," + // 6: qty
                "\"FD_CODE\" TEXT," + // 7: fd_code
                "\"TIME\" TEXT);"); // 8: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        String oid = entity.getOid();
        if (oid != null) {
            stmt.bindString(1, oid);
        }
        stmt.bindLong(2, entity.getTbno());
 
        String tbname = entity.getTbname();
        if (tbname != null) {
            stmt.bindString(3, tbname);
        }
        stmt.bindLong(4, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getQty());
 
        String fd_code = entity.getFd_code();
        if (fd_code != null) {
            stmt.bindString(8, fd_code);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        String oid = entity.getOid();
        if (oid != null) {
            stmt.bindString(1, oid);
        }
        stmt.bindLong(2, entity.getTbno());
 
        String tbname = entity.getTbname();
        if (tbname != null) {
            stmt.bindString(3, tbname);
        }
        stmt.bindLong(4, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getQty());
 
        String fd_code = entity.getFd_code();
        if (fd_code != null) {
            stmt.bindString(8, fd_code);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // oid
            cursor.getInt(offset + 1), // tbno
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tbname
            cursor.getInt(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5), // price
            cursor.getInt(offset + 6), // qty
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fd_code
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setOid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTbno(cursor.getInt(offset + 1));
        entity.setTbname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.getInt(offset + 5));
        entity.setQty(cursor.getInt(offset + 6));
        entity.setFd_code(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Order entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Order entity) {
        return null;
    }

    @Override
    public boolean hasKey(Order entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
