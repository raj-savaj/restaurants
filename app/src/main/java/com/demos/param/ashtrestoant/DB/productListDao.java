package com.demos.param.ashtrestoant.DB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_LIST".
*/
public class productListDao extends AbstractDao<productList, Void> {

    public static final String TABLENAME = "PRODUCT_LIST";

    /**
     * Properties of entity productList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Price = new Property(2, int.class, "price", false, "PRICE");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Fd_code = new Property(4, String.class, "fd_code", false, "FD_CODE");
        public final static Property Qty = new Property(5, String.class, "qty", false, "QTY");
    }


    public productListDao(DaoConfig config) {
        super(config);
    }
    
    public productListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_LIST\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PRICE\" INTEGER NOT NULL ," + // 2: price
                "\"IMAGE\" TEXT," + // 3: image
                "\"FD_CODE\" TEXT," + // 4: fd_code
                "\"QTY\" TEXT);"); // 5: qty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, productList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getPrice());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String fd_code = entity.getFd_code();
        if (fd_code != null) {
            stmt.bindString(5, fd_code);
        }
 
        String qty = entity.getQty();
        if (qty != null) {
            stmt.bindString(6, qty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, productList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getPrice());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String fd_code = entity.getFd_code();
        if (fd_code != null) {
            stmt.bindString(5, fd_code);
        }
 
        String qty = entity.getQty();
        if (qty != null) {
            stmt.bindString(6, qty);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public productList readEntity(Cursor cursor, int offset) {
        productList entity = new productList( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fd_code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // qty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, productList entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice(cursor.getInt(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFd_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQty(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(productList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(productList entity) {
        return null;
    }

    @Override
    public boolean hasKey(productList entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
